name: Build docker images

concurrency:
  group: main-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    tags:
      - "*"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      otp: ${{ steps.otp.outputs.version }}
      elixir: ${{ steps.elixir.outputs.version }}
    steps:
    - uses: actions/checkout@v3
    - name: get otp_version
      id: otp
      run: |
        otp_version=$(grep -E "^\+\sOTP-.*" ./RELEASE.md | sed 's/\+\sOTP-//g' | jq -R -s -c 'split("\n")[:-1]')
        echo "version=$otp_version" >> $GITHUB_OUTPUT
    - name: get elixir_version
      id: elixir
      run: |
        elixir_version=$(grep -E "^\+\sElixir-.*" ./RELEASE.md | sed 's/\+\sElixir-//g' | jq -R -s -c 'split("\n")[:-1]')
        echo "version=$elixir_version" >> $GITHUB_OUTPUT

  base:
    runs-on: ${{ github.repository_owner == 'emqx' && matrix.platform[2] || '["ubuntu-latest"]' }}
    strategy:
      fail-fast: false
      matrix:
        base_image_vsn:
          - "5.0"
        platform:
          - [ubuntu22.04, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [ubuntu22.04, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [ubuntu20.04, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [ubuntu20.04, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [ubuntu18.04, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [ubuntu18.04, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [ubuntu16.04, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [ubuntu16.04, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [debian12, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [debian12, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [debian11, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [debian11, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [debian10, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [debian10, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [debian9, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [debian9, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [el9, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [el9, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [el8, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [el8, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [el7, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [el7, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [amzn2, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [amzn2, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [amzn2023, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [amzn2023, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [alpine3.15.1, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [alpine3.15.1, linux/arm64, [self-hosted, linux, arm64, ephemeral]]

    env:
      REGISTRY_IMAGE: ghcr.io/${{ github.repository }}/base-${{ matrix.base_image_vsn }}

    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Get cache
        run: aws s3 sync s3://docker-buildx-cache/emqx-builder/${{ matrix.platform[0] }} /tmp/.docker-buildx-cache
      - uses: docker/setup-buildx-action@v3
      - uses: docker/setup-qemu-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - uses: docker/metadata-action@v5
        id: base_meta
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: type=raw,value=${{ matrix.platform[0] }}
      - name: Build base image
        id: build
        uses: docker/build-push-action@v5
        with:
          pull: true
          cache-from: type=local,src=/tmp/.docker-buildx-cache,mode=max
          cache-to: type=local,dest=/tmp/.docker-buildx-cache-new,mode=max
          platforms: ${{ matrix.platform[1] }}
          tags: ${{ steps.base_meta.outputs.tags }}
          labels: ${{ steps.base_meta.outputs.labels }}
          file: ${{ matrix.platform[0] }}/Dockerfile
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          context: .
      - name: Update cache
        run: aws s3 sync --delete /tmp/.docker-buildx-cache-new s3://docker-buildx-cache/emqx-builder/${{ matrix.platform[0] }}
      - name: Export digests
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-base:
    runs-on: ubuntu-latest
    needs:
      - base
    strategy:
      fail-fast: false
      matrix:
        base_image_vsn:
          - "5.0"
    env:
      REGISTRY_IMAGE: ghcr.io/${{ github.repository }}/base-${{ matrix.base_image_vsn }}
    steps:
      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

  build:
    runs-on: ${{ github.repository_owner == 'emqx' && matrix.platform[2] || '["ubuntu-latest"]' }}
    needs:
      - prepare
      - base
      - merge-base

    strategy:
      fail-fast: false
      matrix:
        base_image_vsn:
          - "5.0"
        otp: ${{ fromJSON(needs.prepare.outputs.otp) }}
        elixir: ${{ fromJSON(needs.prepare.outputs.elixir) }}
        platform:
          - [ubuntu22.04, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [ubuntu22.04, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [ubuntu20.04, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [ubuntu20.04, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [ubuntu18.04, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [ubuntu18.04, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [ubuntu16.04, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [ubuntu16.04, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [debian12, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [debian12, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [debian11, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [debian11, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [debian10, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [debian10, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [debian9, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [debian9, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [el9, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [el9, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [el8, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [el8, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [el7, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [el7, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [amzn2, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [amzn2, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [amzn2023, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [amzn2023, linux/arm64, [self-hosted, linux, arm64, ephemeral]]
          - [alpine3.15.1, linux/amd64, [self-hosted, linux, x64, ephemeral]]
          - [alpine3.15.1, linux/arm64, [self-hosted, linux, arm64, ephemeral]]

    steps:
    - uses: actions/checkout@v3
    - name: Get ref
      id: ref
      run: echo "ref=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
    - name: Set registry image
      id: registry
      run: |
        echo "image=ghcr.io/${{ github.repository }}/${{ steps.ref.outputs.ref }}" | tee -a $GITHUB_OUTPUT
    - uses: docker/setup-buildx-action@v3
    - uses: docker/setup-qemu-action@v3
    - uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}
    - uses: docker/metadata-action@v5
      id: meta
      with:
        images: ${{ steps.registry.outputs.image }}
        tags: |
          type=raw,value=${{ matrix.elixir }}-${{ matrix.otp }}-${{ matrix.platform[0] }}
    - uses: docker/build-push-action@v5
      id: build
      with:
        pull: true
        no-cache: true
        platforms: ${{ matrix.platform[1] }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_FROM=ghcr.io/${{ github.repository }}/base-${{ matrix.base_image_vsn }}:${{ matrix.platform[0] }}
          OTP_VERSION=${{ matrix.otp }}
          ELIXIR_VERSION=${{ matrix.elixir }}
        file: ./Dockerfile
        context: .
        outputs: type=image,name=${{ steps.registry.outputs.image }},push-by-digest=true,name-canonical=true,push=true
    - name: Export digests
      run: |
        mkdir -p /tmp/digests-build
        digest="${{ steps.build.outputs.digest }}"
        touch "/tmp/digests-build/${digest#sha256:}"
    - name: Upload digest
      uses: actions/upload-artifact@v3
      with:
        name: digests-build
        path: /tmp/digests-build/*
        if-no-files-found: error
        retention-days: 1

  merge-build:
    runs-on: ubuntu-latest
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        base_image_vsn:
          - "5.0"
    steps:
      - name: Get ref
        id: ref
        run: echo "ref=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
      - name: Set registry image
        id: registry
        run: |
          echo "image=ghcr.io/${{ github.repository }}/${{ steps.ref.outputs.ref }}" | tee -a $GITHUB_OUTPUT
      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests-build
          path: /tmp/digests-build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.registry.outputs.image }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Create manifest list and push
        working-directory: /tmp/digests-build
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ steps.registry.outputs.image }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ steps.registry.outputs.image }}:${{ steps.meta.outputs.version }}

  release:
    runs-on: ubuntu-latest
    needs: merge-build

    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v3
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        tag_name: ${{ github.ref }}
        release_name: EMQX Builder ${{ github.ref }} Released
        body_path: RELEASE.md
        draft: false
        prerelease: false
